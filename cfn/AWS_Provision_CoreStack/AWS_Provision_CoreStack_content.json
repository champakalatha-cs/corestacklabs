{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template is to provision an ec2 instance with corestack ami id.",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "Select your EC2 instance type, either default type or higher than default type. ",
      "Type": "String",
      "Default": "t2.large",
      "AllowedValues": [
        "t2.large",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "RemoteCIDR": {
      "Description": "IP address/range to enable SSH access ",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "RemotehttpCIDR": {
      "Description": "IP address/range to enable web/port 80 access ",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "AWSVpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)"
    },
    "AWSSubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "SubnetId of your existing Virtual Private Cloud (VPC)"
    },
    "AWSImageId": {
      "Description": "Provide the Server Image ID",
      "Type": "String"
    },
    "environmentname": {
      "Description": "Provide your Environment type. eg.) Dev, Prod, Staging, etc. ",
      "Type": "String"
    },
    "awsaccountaccesskey": {
      "NoEcho": "true",
      "Description": "Required to create corestack specific SQS, SNS queues and lambda functions ",
      "Type": "String"
    },
    "awsaccountsecretkey": {
      "NoEcho": "true",
      "Description": "Required to create corestack specific SQS, SNS queues and lambda functions ",
      "Type": "String"
    },
    "snsregions": {
      "Description": "Provide the list of sns regions with comma seperated,eg:  us-west-2a, us-west-2b. Note:- You must include the region where you execute the cloudformation template or else instance won't be launched ",
      "Type": "String"
    },
    "smtpemail": {
      "Description": "SMTP email id to which notification alerts are to be sent ",
      "Type": "String"
    },
    "smtppassword": {
      "NoEcho": "true",
      "Description": "Provide the smtp password",
      "Type": "String"
    },
    "smtphost": {
      "Description": "Provide the smtp host of smtp provider, eg:- smtp.office365.com",
      "Type": "String"
    },
    "smtpport": {
      "Description": "Provide the smtp port of smtp provider, eg:- 587, 25",
      "Type": "Number"
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.large": {
        "Arch": "HVM64"
      },
      "m1.large": {
        "Arch": "HVM64"
      },
      "m1.xlarge": {
        "Arch": "HVM64"
      },
      "m2.xlarge": {
        "Arch": "HVM64"
      },
      "m2.2xlarge": {
        "Arch": "HVM64"
      },
      "m2.4xlarge": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "HVM64"
      },
      "c1.xlarge": {
        "Arch": "HVM64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "g2.8xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    }
  },
  "Resources": {
    "CreateElasticIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "AssociateElasticIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "CreateElasticIP",
            "AllocationId"
          ]
        },
        "InstanceId": {
          "Ref": "EC2Instance"
        }
      },
      "DependsOn": "EC2Instance"
    },
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [{
          "Fn::GetAtt": ["InstanceSecurityGroup", "GroupId"]
        }],
        "SubnetId": {
          "Ref": "AWSSubnetId"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "AWSImageId"
        },
        "Tags": [{
          "Key": "Application",
          "Value": "CoreStack"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "smtp_email=",
                {
                  "Ref": "smtpemail"
                },
                "\n",
                " echo $smtp_email >> /opt/smtp_input.txt",
                "\n",
                "smtp_password=",
                {
                  "Ref": "smtppassword"
                },
                "\n",
                " echo $smtp_password >> /opt/smtp_input.txt",
                "\n",
                "smtp_host=",
                {
                  "Ref": "smtphost"
                },
                "\n",
                " echo $smtp_host >> /opt/smtp_input.txt",
                "\n",
                "smtp_port=",
                {
                  "Ref": "smtpport"
                },
                "\n",
                " echo $smtp_port >> /opt/smtp_input.txt",
                "\n",
                "environment_name=",
                {
                  "Ref": "environmentname"
                },
                "\n",
                " echo $environment_name >> /opt/sns_input.txt",
                "\n",
                "aws_access_key=",
                {
                  "Ref": "awsaccountaccesskey"
                },
                "\n",
                " echo $aws_access_key >> /opt/sns_input.txt",
                "\n",
                "aws_secret_key=",
                {
                  "Ref": "awsaccountsecretkey"
                },
                "\n",
                " echo $aws_secret_key >> /opt/sns_input.txt",
                "\n",
                "sns_regions=",
                {
                  "Ref": "snsregions"
                },
                "\n",
                " echo $sns_regions >> /opt/sns_input.txt",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "AWSVpcId"
        },
        "GroupName" : "CoreStack",
        "GroupDescription": "Enable SSH access via port 22",
        "Tags": [{
          "Key": "Application",
          "Value": "CoreStack"
        }],
        "SecurityGroupIngress": [{
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "RemotehttpCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18090",
            "ToPort": "18090",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "28082",
            "ToPort": "28082",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1789",
            "ToPort": "1789",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18081",
            "ToPort": "18081",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18083",
            "ToPort": "18083",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8004",
            "ToPort": "8004",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8003",
            "ToPort": "8003",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18080",
            "ToPort": "18080",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5000",
            "ToPort": "5000",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8989",
            "ToPort": "8989",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18084",
            "ToPort": "18084",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18087",
            "ToPort": "18087",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "18085",
            "ToPort": "18085",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4400",
            "ToPort": "4400",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9001",
            "ToPort": "9001",
            "CidrIp": {
              "Ref": "RemoteCIDR"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance"
      }
    },
    "AZ": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicIp"
        ]
      }
    }
  }
}
