{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "AWSImageId": {
      "Description": "Give the Server Image ID",
      "Type": "String"
    },
    "queueprefix": {
      "Description": "Give the queue prefix, say PICO_queue",
      "Type": "String"
    },
    "awsaccountaccesskey": {
      "Description": "Give your access key for sqs",
      "Type": "String"
    },
    "awsaccountsecretkey": {
      "Description": "Give your secret key for sqs",
      "Type": "String"
    },
    "corestacklicenseexpirydate": {
      "Description": "Give the expiry date, say 25-07-1997",
      "Type": "String"
    },
    "companyname": {
      "Description": "Give your company name",
      "Type": "String"
    },
    "adminemailaddress": {
      "Description": "Give your admin email id for license",
      "Type": "String"
    },
    "smtpemail": {
      "Description": "Give the smtp email for notification alerts",
      "Type": "String"
    },
    "smtppassword": {
      "Description": "Give the smtp password",
      "Type": "String"
    },
    "smtphost": {
      "Description": "Give the smtp host of smtp provider, eg:- smtp.office365.com",
      "Type": "String"
    },
    "smtpport": {
      "Description": "Give the smtp port of smtp provider, eg:- 587, 25",
      "Type": "Number"
    }
  },

  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "HVM64"
      },
      "t2.nano": {
        "Arch": "HVM64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.large": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "HVM64"
      },
      "m1.medium": {
        "Arch": "HVM64"
      },
      "m1.large": {
        "Arch": "HVM64"
      },
      "m1.xlarge": {
        "Arch": "HVM64"
      },
      "m2.xlarge": {
        "Arch": "HVM64"
      },
      "m2.2xlarge": {
        "Arch": "HVM64"
      },
      "m2.4xlarge": {
        "Arch": "HVM64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "HVM64"
      },
      "c1.xlarge": {
        "Arch": "HVM64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "g2.8xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    }
  },

  "Resources": {
    "CreateElasticIP":{
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "AssociateElasticIP" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "CreateElasticIP", "AllocationId" ]},
        "InstanceId" : { "Ref" : "EC2Instance" }
      },
      "DependsOn" : "EC2Instance"
    },
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [{
          "Ref": "InstanceSecurityGroup"
        }],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "AWSImageId"
        },
        "UserData" : { "Fn::Base64" :
  { "Fn::Join" : ["", [
     "#!/bin/bash -xe\n",
     "ansible-playbook /opt/core/post-deployment/corestack_queue_configuration/queue_configuration.yml -i localhost, -c local", 
      " --extra-vars ",
      "queue_prefix=",
       { 
         "Ref": "queueprefix"
       },
      " --extra-vars ",
      "aws_account_access_key=",
       { 
         "Ref": "awsaccountaccesskey"
       },
      " --extra-vars ",
      "aws_account_access_key=",
       { 
         "Ref": "awsaccountaccesskey"
       },
      " --extra-vars ",
      "aws_account_secret_key=",
       { 
         "Ref": "awsaccountsecretkey"
       },
       " --extra-vars ",
       "corestack_license_expiry_date=",
       { 
         "Ref": "corestacklicenseexpirydate"
       },
       " --extra-vars ",
       "company_name=",
       { 
         "Ref": "companyname"
       },
       " --extra-vars ",
       "admin_email_address=",
       { 
         "Ref": "adminemailaddress"
       },
       " --extra-vars ",
       "smtp_email=",
       { 
         "Ref": "smtpemail"
       },
       " --extra-vars ",
       "smtp_password=",
       { 
         "Ref": "smtppassword"
       },
       " --extra-vars ",
       "smtp_host=",
       { 
         "Ref": "smtphost"
       },
       " --extra-vars ",
       "smtp_port=",
       { 
         "Ref": "smtpport"
       },
        "\n"
  ]]}
}
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18090",
          "ToPort": "18090",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "28082",
          "ToPort": "28082",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "1789",
          "ToPort": "1789",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18081",
          "ToPort": "18081",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18083",
          "ToPort": "18083",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "8004",
          "ToPort": "8004",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "8000",
          "ToPort": "8000",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "8003",
          "ToPort": "8003",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18080",
          "ToPort": "18080",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "5000",
          "ToPort": "5000",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "8989",
          "ToPort": "8989",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18084",
          "ToPort": "18084",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18087",
          "ToPort": "18087",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "18085",
          "ToPort": "18085",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "4400",
          "ToPort": "4400",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },{
          "IpProtocol": "tcp",
          "FromPort": "9001",
          "ToPort": "9001",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        }]
      }
    }
  },

  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance"
      }
    },
    "AZ": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["EC2Instance", "AvailabilityZone"]
      }
    },
    "PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["EC2Instance", "PublicDnsName"]
      }
    },
    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["EC2Instance", "PublicIp"]
      }
    }
    
  }
}

